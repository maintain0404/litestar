name: Tests And Linting

on:
  pull_request:
  merge_group:
  push:
    branches:
      - main
      - v1.51

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"

      - name: Install Pre-Commit
        run: python -m pip install pre-commit

      - name: Load cached Pre-Commit Dependencies
        id: cached-pre-commit-dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit/
          key: pre-commit-4|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Execute Pre-Commit
        run: pre-commit run --show-diff-on-failure --color=always --all-files

  mypy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
          allow-prereleases: true

      - uses: pdm-project/setup-pdm@v4
        name: Set up PDM
        with:
          python-version: "3.8"
          allow-python-prereleases: false
          cache: true
          cache-dependency-path: |
            ./pdm.lock

      - name: Install dependencies
        run: pdm install -G:all

      - name: Run mypy
        run: pdm run mypy

  pyright:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
          allow-prereleases: true

      - uses: pdm-project/setup-pdm@v4
        name: Set up PDM
        with:
          python-version: "3.8"
          allow-python-prereleases: false
          cache: true
          cache-dependency-path: |
            ./pdm.lock

      - name: Install dependencies
        run: pdm install -G:all

      - name: Run pyright
        run: pdm run pyright

  slotscheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
          allow-prereleases: false

      - uses: pdm-project/setup-pdm@v4
        name: Set up PDM
        with:
          python-version: "3.8"
          allow-python-prereleases: false
          cache: true
          cache-dependency-path: |
            ./pdm.lock

      - name: Install dependencies
        run: pdm install -G:all

      - name: Run slotscheck
        run: pdm run slotscheck litestar

  test:
    name: "test (${{ matrix.python-version }})"
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    uses: ./.github/workflows/test.yml
    with:
      coverage: ${{ (matrix.python-version == '3.12' || matrix.python-version == '3.8') }}
      python-version: ${{ matrix.python-version }}

  test_integration:
    name: Test server integration
    runs-on: ubuntu-latest
    strategy:
      matrix:
        uvicorn-version: ["uvicorn<0.27.0", "uvicorn>=0.27.0"]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - uses: pdm-project/setup-pdm@v4
        name: Set up PDM
        with:
          python-version: 3.11
          allow-python-prereleases: false
          cache: true
          cache-dependency-path: |
            ./pdm.lock

      - name: Install dependencies
        run: |
          pdm install -G:all
          pip install -U "${{ matrix.uvicorn-version }}"

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      - name: Test
        run: pdm run pytest tests -m server_integration

  test-platform-compat:
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'test platform compat')
    strategy:
      fail-fast: false
      matrix:
        os: ["macos-latest", "windows-latest"]
    uses: ./.github/workflows/test.yml
    with:
      python-version: "3.12"
      os: ${{ matrix.os }}
      timeout: 30

  sonar:
    needs:
      - test
      - validate
    if: github.event.pull_request.head.repo.fork == false && github.repository_owner == 'litestar-org'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  codeql:
    needs:
      - test
      - validate
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL Without Dependencies
        uses: github/codeql-action/init@v3
        with:
          setup-python-dependencies: false

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  build-docs:
    needs:
      - validate
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          allow-prereleases: true

      - uses: pdm-project/setup-pdm@v4
        name: Set up PDM
        with:
          python-version: "3.12"
          allow-python-prereleases: false
          cache: true
          cache-dependency-path: |
            ./pdm.lock

      - name: Install dependencies
        run: pdm install -G:all

      - name: Build docs
        run: pdm run make docs

      - name: Check docs links
        env:
          LITESTAR_DOCS_IGNORE_MISSING_EXAMPLE_OUTPUT: 1
        run: pdm run make docs-linkcheck

      - name: Save PR number
        run: |
          echo "${{ github.event.number }}" > .pr_number

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docs-preview
          path: |
            docs/_build/html
            .pr_number
          include-hidden-files: true

  test_minimal_app:
    name: Test Minimal Application with Base Dependencies
    runs-on: ubuntu-latest
    env:
      python_version: "3.12"
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - uses: pdm-project/setup-pdm@v4
        name: Set up PDM
        with:
          python-version: "3.12"
          allow-python-prereleases: false
          cache: true
          cache-dependency-path: |
            ./pdm.lock

      - name: Install dependencies
        run: pdm install

      - name: Set pythonpath
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      - name: Test
        run: mv tests/examples/test_hello_world.py test_hello_world.py && pdm run pytest test_hello_world.py

  test_pydantic_1_app:
    name: Test Minimal Pydantic 1 application
    runs-on: ubuntu-latest
    env:
      python_version: "3.12"
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - uses: pdm-project/setup-pdm@v4
        name: Set up PDM
        with:
          python-version: "3.12"
          allow-python-prereleases: false
          cache: true
          cache-dependency-path: |
            ./pdm.lock

      - name: Install dependencies
        run: |
          pdm install
          pdm run python -m ensurepip
          pdm run python -m pip install "pydantic==1.*"

      - name: Set pythonpath
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      - name: Test
        run: pdm run coverage run --branch -m unittest test_apps/pydantic_1_app.py

      - name: Rename coverage file
        run: mv .coverage* .coverage.pydantic_v1

      - uses: actions/upload-artifact@v3
        with:
          name: coverage-data
          path: .coverage.pydantic_v1
          include-hidden-files: true

  upload-test-coverage:
    runs-on: ubuntu-latest
    needs:
      - test
      - test_pydantic_1_app
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: coverage-data

      - name: Combine coverage files
        run: |
          python -Im pip install coverage covdefaults
          python -Im coverage combine
          python -Im coverage xml -i

      - name: Fix coverage file name
        run: sed -i "s/home\/runner\/work\/litestar\/litestar/github\/workspace/g" coverage.xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
